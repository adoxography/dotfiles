global !p
def capitalize_first(word):
	if word:
		word = word[0].upper() + word[1:]
	return word
endglobal

snippet rfc "React functional component" b
const ${1:`!p snip.rv = snip.basename`} = (${2}) => {
	return (
		<div>
			${3:<p>Hello</p>}
		</div>
	);
};

export default `!p snip.rv = t[1]`;
endsnippet

################################
# React hooks                  #
################################

snippet useS "useState hook" b
const [${1:state}, set`!p snip.rv = capitalize_first(t[1])`] = useState(${3:'${4}'});
endsnippet

snippet useC "useContext hook" b
const ${1:context} = useContext(${2});
endsnippet

snippet useR "useRef hook" b
const ${1:ref} = useRef(${2:null});
endsnippet

snippet useE "useEffect hook" b
useEffect(() => {
	${1}
}, [${2}]);
endsnippet

snippet useCB "useCallback hook" b
const ${1:callback} = useCallback((${2}) => ${3:{
	${4}
}}, [${5}]);
endsnippet

snippet useM "useMemo hook" b
const ${1:memo} = useMemo(() => ${2:{
	${3}
}}, [${4}]);
endsnippet

################################
# JSDoc                        #
################################
snippet /** "JSDoc comment" bA
/**
 * ${1:${VISUAL}}$0
 */
endsnippet

snippet /(?<=\* )@?par(am)?/ "@param" r
@param {${1:Type}} ${2:varname} ${3:TODO: Description}
endsnippet

snippet /(?<=\* )@?ret(urns?)?/ "@returns" r
@returns {${1:Type}} ${2:TODO: Description}
endsnippet
